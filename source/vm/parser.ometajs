//----------------------------------------------------------------------
//
// This source file is part of the furipota project.
//
// Licensed under MIT. See LICENCE for full licence information.
// See CONTRIBUTORS for the list of contributors to the project.
//
//----------------------------------------------------------------------

const ast = require('./ast');

var reserved = [
  'define',
  'import', 'core', 'plugin', 'export', 'as',
  'true', 'false',
  'let', 'in',
  'if', 'then', 'else',
  'and', 'or', 'not',
  'default',
  'do', 'call', 'action', 'bind', 'return',
  'match', 'case', 'with', 'any'
];

function isValid(id) {
  return reserved.indexOf(id) === -1;
}

function makeLambda(args, expr) {
  const lastArg = args[args.length - 2];
  const recordArg = args[args.length - 1];
  return args.slice(0, -2).reduceRight(function(fn, arg) {
    return ast.Lambda(arg, ast.Identifier('_'), fn);
  }, ast.Lambda(lastArg, recordArg, expr));
}


ometa FuripotaParser {
  // --[ Lexical structure ]
  space   = /\s/,
  ignored = space | comment,
  comment = fromTo('#', '\n'):a -> a.slice(1),
  ws      = ignored*,
  sws     = ignored+,
  kw :xs  = seq(xs) ~(letter | digit | '-' | ':'),
  idStart = letter,
  idRest  = letter | digit | '-',
  kwRest  = idRest | '_' | infix,
  eof     = ~char,

  octDigits = /[0-7][0-7_]*/:a             -> a.replace(/_/g, ''),
  hexDigits = /[0-9a-fA-F][0-9a-fA-F_]*/:a -> a.replace(/_/g, ''),
  binDigits = /[01][01_]*/:a               -> a.replace(/_/g, ''),
  digits = /[0-9][0-9_]*/:a                -> a.replace(/_/g, ''),

  exponent = ('e' | 'E') sign?:s digits:d -> s + d,
  sign = '+' | '-',

  stringEscape = '\\' ( 'b' -> '\b'
                      | 'f' -> '\f'
                      | 'n' -> '\n'
                      | 'r' -> '\r'
                      | 't' -> '\t'
                      | char),

  stringChar = stringEscape:a       -> ast.Character(a)
             | '{' expression:e '}' -> ast.InterpolateExpression(e)
             | (~seq('"') char):a   -> ast.Character(a),
  unescapableChars = ~seq('"""') char,


  Identifier = <idStart idRest*>:a ?isValid(a)
               -> ast.Identifier(a),

  Keyword = '-' symbol:a ':'
            -> ast.Keyword(a),

  symbol = <(letter | digit | '-' | '_' | infix)+>,

  infix = (seq('===') | seq('=/=') | '>' | seq('>=') | seq('<') | seq('<=') | '+' | '-' | '*' | '/'):a
          -> ast.Identifier(a),

  Hole = '_' -> ast.Hole(),


  // --[ Values ]
  value = Boolean | Number | Text | Vector | Record | Lambda | Tagged,

  Boolean = kw('true') -> ast.Boolean(true)
          | kw('false') -> ast.Boolean(false),

  Number = sign?:s ( '0' 'b' binDigits:n
                     -> ast.Integer(s || '+', parseInt(n, 2).toString())
                   | '0' 'o' octDigits:n
                     -> ast.Integer(s || '+', parseInt(n, 8).toString())
                   | '0' 'x' hexDigits:n
                     -> ast.Integer(s || '+', parseInt(n, 16).toString())
                   | digits:a '.' digits:b exponent?:c
                     -> ast.Decimal(s || '+', a, b, c || '')
                   | digits:a
                     -> ast.Integer(s || '+', a)
                   ),


  Text = seq('"""') <unescapableChars*>:as seq('"""')
         -> ast.Text(as)
       | '"' stringChar*:as '"'
         -> ast.Interpolate(as),

  Vector = '[' ws ']'
           -> ast.Vector([])
         | '[' ws vectorExpression:a (ws ',' ws vectorExpression)*:as ws ']'
           -> ast.Vector([a].concat(as)),

  vectorExpression = seq('...') expression:e -> ast.VectorSpread(e)
                   | expression:e            -> ast.VectorElement(e),

  Record = recordPair:a (ws recordPair)*:xs
           -> ast.Record([a].concat(xs)),

  recordPair = '-' symbol:a (ws Identifier)+:as ws seq('->') ws recordExpression:v
               -> [ast.Keyword(a), makeLambda(as.concat(ast.Identifier('_')), v)]
             | Keyword:k ws recordExpression:v 
               -> [k, v],

  recordExpression = memberExpression
                   | Vector
                   | Shell,

  Lambda = (ws Identifier)+:as (ws '@' ws Identifier)?:r ws seq('->') ws expression:e
         -> makeLambda(as.concat([r || ast.Identifier('_')]), e),

  Tagged = '^' Identifier:i (ws simpleExpression)*:es -> ast.Tagged(i, es),


  // --[ Declarations ]
  declaration = Define | Import | Export,

  Define = kw('define') ws Identifier:i ws '=' doc?:d ws expression:e
           -> ast.Define(i, e, d || '')
         | kw('define') ws Identifier:i ws argNames:as ws '=' doc?:d ws expression:e
           -> ast.Define(i, makeLambda(as, e), d || '')
         | kw('define') ws Identifier:l ws infix:op ws Identifier:r ws '=' doc?:d ws expression:e
           -> ast.Define(op, makeLambda([l, r, ast.Identifier('_')], e), d || ''),

  argNames = (ws Identifier)+:as (ws '@' ws Identifier)?:r -> as.concat([r || ast.Identifier('_')]),
  doc = (space* comment)*:xs -> xs.join('').trimRight(),

  Import = kw('import') ws importKind?:k ws Text:p ws kw('as') ws Identifier:i
           -> ast.ImportAliasing(p, i, k || 'furipota')
         | kw('import') ws importKind?:k ws Text:p
           -> ast.Import(p, k || 'furipota'),

  importKind = kw('core') | kw('plugin'),

  Export = kw('export') ws Define:d
           -> ast.Seq([d, ast.Export(d.id)])
         | kw('export') ws Identifier:i ws kw('as') ws Identifier:a
           -> ast.ExportAliasing(i, a)
         | kw('export') ws Identifier:i
           -> ast.Export(i),

  // --[ Expressions ]
  expression = Record
             | Lambda
             | Let
             | IfThenElse
             | Match
             | Pipe
             | Do,

  doExpression = Lambda | Record | Pipe,

  Do = kw('do') (ws DoInstruction)+:as
       -> ast.Do(as),

  DoInstruction = kw('call') ws doExpression:e
                  -> ast.DoCall(e)
                | kw('action') ws doExpression:e
                  -> ast.DoAction(e)
                | kw('let') ws Identifier:i ws '=' ws doExpression:e
                  -> ast.DoLet(i, e)
                | kw('if') ws Logical:c ws kw('then') (ws DoInstruction)+:t ws kw('else') (ws DoInstruction)+:a
                  -> ast.DoIfThenElse(c, t, a)
                | kw('bind') ws Identifier:i ws seq('<-') ws doExpression:e
                  -> ast.DoBind(i, e)
                | kw('return') ws doExpression:e
                  -> ast.DoReturn(e),

  Let = kw('let') ws Identifier:i ws '=' ws expression:v ws kw('in') ws expression:e
        -> ast.Let(i, v, e)
      | kw('let') ws Identifier:i ws argNames:as ws '=' ws expression:v ws kw('in') ws expression:e
        -> ast.Let(i, makeLambda(as, v), e)
      | kw('let') ws Identifier:l ws infix:op ws Identifier:r ws '=' ws expression:v ws kw('in') ws expression:e
        -> ast.Let(op, makeLambda([l, r, ast.Identifier('_')], v), e),

  IfThenElse = kw('if') ws expression:c
                 ws kw('then') ws expression:t
                 ws kw('else') ws expression:e
               -> ast.IfThenElse(c, t, e),

  Pipe = Pipe:a ws seq('|>') ws Logical:t
         -> ast.Pipe(a, t)
       | Logical,

  Logical = Logical:a ws (kw('and') | kw('or')):o ws Relational:b
            -> ast.Infix(ast.Variable(ast.Identifier(o)), a, b)
          | Infix,

  Infix = Infix:l ws '`' qualifiedIdentifier:i ws Unary:r
          -> ast.Infix(i, l, r)
        | Infix:l ws '`' Identifier:i ws Unary:r
          -> ast.Infix(ast.Variable(i), l, r)
        | Postfix,

  Postfix = Postfix:e ws '|' ws memberExpression:i (ws '@' ws Record)?:r
            -> ast.Invoke(i, e, r || ast.Record([]))
          | Relational,

  qualifiedIdentifier = qualifiedIdentifier:a ws '.' ws symbol:i
                        -> ast.Get(a, ast.Identifier(i)),

  Relational = Relational:a ws (seq('===') | seq('=/=') | '>' | seq('>=') | '<' | seq('<=')):o ws Add:b
               -> ast.Infix(ast.Variable(ast.Identifier(o)), a, b)
             | Add,
  
  Add = Add:a ws ('+' | '-'):o ws Multiply:b
        -> ast.Infix(ast.Variable(ast.Identifier(o)), a, b)
      | Multiply,

  Multiply = Multiply:a ws ('*' | '/'):o sws Unary:b
             -> ast.Infix(ast.Variable(ast.Identifier(o)), a, b)
           | Unary,

  Unary = kw('not') ws Invoke:e
          -> ast.Prefix(ast.Identifier('not'), e)
        | Invoke,

  Invoke = Invoke:i ws memberExpression:v (ws '@' ws Record)?:r
           -> ast.Invoke(i, v, r || ast.Record([]))
         | memberExpression,

  memberExpression = memberExpression:m ws '.' ws Identifier:i
                     -> ast.Get(m, i)
                   | simpleExpression,

  Shell = seq('$(') ws shellBaseArg:cmd (ws shellArg)*:args (ws '@' ws Record)?:r ws ')'
          -> ast.Shell(cmd, args, r || ast.Record([])),

  shellBaseArg = '\'' symbol:s       -> ast.ShellSymbol(s)
               | memberExpression:e  -> ast.ShellExpression(e),

  shellArg = shellBaseArg
           | seq('...') memberExpression:e -> ast.ShellSpread(e),

  simpleExpression = Boolean
                   | Text
                   | Number
                   | Vector
                   | Tagged
                   | Shell
                   | Hole
                   | Identifier:i               -> ast.Variable(i)
                   | '(' ws expression:a ws ')' -> a,

  Match = kw('match') ws expression:e ws kw('with') 
          (ws CaseExpression)+:cs 
          (ws kw('default') ws expression)?:me 
       -> ast.Match(e, cs.concat(me ? [ast.MatchCase(ast.MatchAny(), me)] : [])),

  CaseExpression = kw('case') ws CasePattern:p ws kw('then') ws expression:e -> ast.MatchCase(p, e),

  CasePattern = Identifier:i ws kw('if') ws Logical:a          -> ast.MatchEquals(i, a)
              | kw('any') ws kw('if') ws Logical:a             -> ast.MatchEquals(ast.Identifier('_'), a)
              | (Boolean | Number | Text):v                    -> ast.MatchEquals(ast.Identifier('_'), v)
              | Identifier:i                                   -> ast.MatchBind(i)
              | '^' caseTagged:a                               -> ast.MatchTagged(a[0], a[1])
              | CaseVector:v                                   -> ast.MatchVector(v)
              | kw('any')                                      -> ast.MatchAny()
              | '(' ws CasePattern:a ws ')'                    -> a,

  caseTagged = memberExpression:m (ws CasePattern)*:ps -> [m, ps]
             | Identifier:i (ws CasePattern)*:ps       -> [ast.Variable(i), ps],

  CaseVector = '[' ws ']' -> []
             | '[' CasePattern:e (ws ',' ws CasePattern)*:es (ws ',' ws caseVectorLast)?:le ']' 
               -> [e].concat(es).map(ast.MatchVectorElement).concat(le ? [le] : []),

  caseVectorLast = seq('...') kw('let') ws Identifier:i -> ast.MatchVectorSpread(ast.MatchBind(i))
                 | seq('...') kw('any')                 -> ast.MatchVectorSpread(ast.MatchAny())
                 | CasePattern:p                        -> ast.MatchVectorElement(p),



  // --[ Entry points ]
  Program = ws seq('%furipota/1') (ws declaration)*:xs ws eof
            -> ast.Program(xs)
}
